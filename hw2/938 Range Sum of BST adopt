//改編的部分是將leetcode的題目包裝成OS題目，然後把「符合範圍的值總和」改成「符合範圍的值個數」

//在作業系統中，會為每個行程分配優先權，優先權值越低代表優先權越高。當一個新的行程被建立的時候，系統會分配給他一個優先權值，並且記錄在BST中。
今天我們想要優化一個排程演算法，所以我們需要檢查在這段優先權值區間內有多少優先權值是被分配出去，你覺得我們可以用甚麼作法?

typedef struct TreeNode {
    int val;
    struct TreeNode* left;
    struct TreeNode* right;
} treenode;

int countBST(treenode* root, int low, int high) {
    // interative DFS
    treenode* stack[500];
    treenode* node;
    int sp=0, ans=0;
    if(root != NULL){
        stack[sp++] = root;
    }
    while (sp>0){
        //stack有節點要訪問
        node=stack[--sp];
        if (node->val >= low && node->val <= high ) ans ++;
        //先找左邊，所以先把右邊儲存起來
        if (node->val <= high && node-> right != NULL) stack[sp++]= node->right;
        if (node->val >= low && node-> left != NULL) stack[sp++]= node-> left;
    }
    return ans;
}
